{"version":3,"sources":["assets/images/bang.jpeg","assets/images/del.jpg","assets/images/mum.jpg","assets/images/hyd.jpg","component/Cards/Cards.js","component/SideBar/Title/Title.js","component/SideBar/SideBar.js","component/Articles/Articles.js","container/Content/Content.js","component/NavBar/NavItems/Item/Items.js","component/NavBar/NavItems/NavItems.js","component/NavBar/NavBar.js","container/Location/LocationNames/LocationNames.js","container/Location/Location.js","App.js","serviceWorker.js","index.js","assets/images/a2.png"],"names":["module","exports","Cards","className","onClick","this","props","clicked","src","A2","alt","title","desc","Component","Title","SideBar","state","posts","axios","get","then","response","data","setState","slice","map","post","key","id","Articles","loadedPost","body","Content","selectedPostId","postClickHandler","updatedPosts","cardContent","Items","href","children","NavItems","NavBar","LocationNames","image","city","cityData","name","require","Location","boxData","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4d8b7071.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bang.e6ba88f5.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/del.51af6882.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mum.74b6fbe7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/hyd.0719352b.jpg\";","import React, { Component } from 'react'\r\nimport './Cards.css'\r\nimport A2 from '../../assets/images/a2.png'\r\n\r\nclass Cards extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Cards\" onClick={this.props.clicked}>\r\n                <img src={A2} alt=\"A1\" />\r\n                <h1>{this.props.title}</h1>\r\n                <p>{this.props.desc}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cards\r\n","import React from 'react'\r\n\r\nconst Title = (props) => (\r\n    <h4>{props.title}</h4>\r\n);\r\n\r\nexport default Title\r\n","import React, {Component} from 'react'\r\nimport axios from 'axios'\r\nimport Title from './Title/Title'\r\nimport './SideBar.css'\r\n\r\nclass SideBar extends Component {\r\n    state = {\r\n        posts: []\r\n    }\r\n    componentDidMount() {\r\n        axios.get('https://jsonplaceholder.typicode.com/posts')\r\n            .then(response => {\r\n                const posts = response.data;\r\n                this.setState({posts: posts});\r\n            })\r\n    }\r\n    render() {\r\n        const title = this.state.posts.slice(0, 5).map(post => {\r\n            return <Title\r\n                        key={post.id}\r\n                        title={post.title} />\r\n        });\r\n         return (\r\n            <div className=\"Sidebar\">\r\n            <h3>Recent News</h3>\r\n                {title}\r\n            </div>\r\n         )\r\n    }\r\n}\r\n\r\nexport default SideBar\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport { AiOutlineUser, AiOutlineClockCircle } from \"react-icons/ai\"\r\n\r\nimport './Articles.css'\r\nimport A2 from '../../assets/images/a2.png'\r\n\r\nclass Articles extends Component {\r\n    state = {\r\n        loadedPost: null\r\n    }\r\n\r\n    componentDidUpdate () {\r\n        if (this.props.id) {\r\n            if (!this.state.loadedPost || (this.state.loadedPost && this.state.loadedPost.id !== this.props.id)) {\r\n                axios.get('https://jsonplaceholder.typicode.com/posts/' + this.props.id)\r\n                    .then(response => {\r\n                        this.setState({loadedPost: response.data})\r\n                });\r\n            }\r\n        }\r\n        \r\n    }\r\n    render() {\r\n        let post = <p>Select Post</p>\r\n        if (this.props.id) {\r\n            post = <p>Loading....</p>\r\n        }\r\n        if (this.state.loadedPost) {\r\n            post = (\r\n                    <div className=\"articles\">\r\n                    <h1>{this.state.loadedPost.title}</h1>\r\n                    <img src={A2} alt=\"A1\" />\r\n                    <div className=\"AuthDate\">\r\n                        <p><AiOutlineUser />  Palermo</p>\r\n                        <p><AiOutlineClockCircle />  Date</p>\r\n                    </div>\r\n                    <p>{this.state.loadedPost.body}</p>\r\n                </div>\r\n            );\r\n        }\r\n        return post;\r\n    }\r\n}\r\n\r\nexport default Articles\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\n\r\nimport Cards from '../../component/Cards/Cards'\r\nimport Sidebar from '../../component/SideBar/SideBar'\r\n//import Location from '../Location/Location'\r\nimport Articles from '../../component/Articles/Articles'\r\nimport './Content.css'\r\n// import A1 from '../../assets/images/a1.png'\r\n\r\nexport class Content extends Component {\r\n\r\n    state = {\r\n        posts: [],\r\n        selectedPostId: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('https://jsonplaceholder.typicode.com/posts')\r\n            .then(response => {\r\n                const posts = response.data.slice(0, 10);\r\n                const updatedPosts = posts.map(post => {\r\n                    return {\r\n                        ...post\r\n                    }\r\n                });\r\n                this.setState({posts: updatedPosts});\r\n            })\r\n    }\r\n\r\n    postClickHandler = (id) => {\r\n        this.setState({selectedPostId: id});\r\n    }\r\n\r\n    render() {\r\n        const cardContent = this.state.posts.map(post => {\r\n            return <Cards\r\n                        key={post.id}\r\n                        title={post.title}\r\n                        desc={post.body}\r\n                        clicked={() => this.postClickHandler(post.id)} />\r\n        });\r\n        \r\n        return (\r\n            <div className=\"Content\">\r\n                <div className=\"cardContent\">\r\n                    <Articles id={this.state.selectedPostId} />\r\n                    <h2>Funding News</h2>\r\n                    {cardContent}\r\n                </div>\r\n                <div className=\"sidebarContent\">\r\n                    <Sidebar posts={this.state.posts} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Content\r\n","import React from 'react'\r\nimport './Items.css'\r\n\r\nconst Items = (props) => (\r\n    <li className=\"Items\"><a href=\"/\">{props.children}</a></li>\r\n);\r\n\r\nexport default Items\r\n","import React from 'react'\r\nimport './NavItems.css'\r\nimport Items from './Item/Items'\r\n\r\nconst NavItems = () => (\r\n    <ul className=\"NavItems\">\r\n        <Items>Start-up News</Items>\r\n        <Items>Co-working News</Items>\r\n        <Items>About Us</Items>\r\n    </ul>\r\n);\r\n\r\nexport default NavItems\r\n","import React from 'react'\r\nimport './NavBar.css'\r\nimport NavItems from './NavItems/NavItems'\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <header className=\"Navbar\">\r\n            <h3>Co-Working Universe</h3>\r\n            <nav>\r\n                <NavItems />\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default NavBar\r\n","import React from 'react'\r\nimport './LocationNames.css'\r\n\r\nconst LocationNames = (props) => {\r\n    return (\r\n        <div className=\"cityBox\">\r\n            <img src={props.image} alt=\"Cities\" />\r\n            <h4>{props.city}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LocationNames\r\n","import React from 'react'\r\n//import Bang from '../../assets/images/bang.jpeg'\r\nimport LocationNames from './LocationNames/LocationNames'\r\nimport './Location.css'\r\n\r\nconst cityData = [\r\n    {name: 'Bengaluru', image: require('../../assets/images/bang.jpeg')},\r\n    {name: 'Delhi/NCR', image: require('../../assets/images/del.jpg')},\r\n    {name: 'Mumbai', image: require('../../assets/images/mum.jpg')},\r\n    {name: 'Hyderabad', image: require('../../assets/images/hyd.jpg')},\r\n];\r\n\r\nconst Location = (props) => {\r\n\r\n    const boxData = cityData.map(city => (\r\n        <LocationNames\r\n                city={city.name}\r\n                image={city.image}  />\r\n    ));\r\n\r\n    return (\r\n        <div className=\"location\">\r\n            <h2>Locations of our Co-working spaces</h2>\r\n            {boxData}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Location\r\n","import React, { Component } from 'react'\nimport { BrowserRouter} from 'react-router-dom'\nimport './App.css'\nimport Content from './container/Content/Content'\nimport Navbar from './component/NavBar/NavBar'\nimport Location from './container/Location/Location'\n//import Articles from './component/Articles/Articles'\n\nexport class App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          {/* <Route path=\"/articles\" component={Articles} /> */}\n          <Location />\n          <Navbar />\n          <Content />\n        </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/a2.2a93b0ac.png\";"],"sourceRoot":""}